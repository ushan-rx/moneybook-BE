package com.moneybook.service;

import com.moneybook.dto.group.GroupCreateDto;
import com.moneybook.dto.group.GroupDto;
import com.moneybook.exception.ResourceNotFoundException;
import com.moneybook.mappers.GroupMapper;
import com.moneybook.model.FriendGroup;
import com.moneybook.model.NormalUser;
import com.moneybook.repository.GroupRepo;
import com.moneybook.repository.NormalUserRepo;
import com.soundicly.jnanoidenhanced.jnanoid.NanoIdUtils;
import jakarta.transaction.Transactional;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@AllArgsConstructor
public class GroupService {

    private GroupRepo repo;
    private NormalUserRepo normalUserRepo;

    @Transactional
    public GroupDto saveGroup(String userId, GroupCreateDto groupCreateDto) throws ResourceNotFoundException {

        // find if existing user created the group
        NormalUser user = normalUserRepo.findById(userId).orElseThrow(() -> new ResourceNotFoundException("User not found"));

        FriendGroup group = GroupMapper.MAPPER.toGroup(groupCreateDto);
        group.setGroup_id(NanoIdUtils.randomNanoId(15));  // set group_id generated by nanoId
        group.setOwnerUsername(user.getUsername()); // Set the created_by field to the username of the user
        group.setCreated_by(user); // Set the owner of the group to the user

        user.getGroups().add(group); // Add the group to the user's list of groups

        normalUserRepo.save(user);
        FriendGroup groupCreated = repo.saveAndFlush(group);
        return GroupMapper.MAPPER.fromGroup(groupCreated);
    }

}
